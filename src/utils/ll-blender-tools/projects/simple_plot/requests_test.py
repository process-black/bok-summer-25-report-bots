import requests
import time
import bpy

default_data = {'c': [106.145, 107.36, 106.595, 105.43, 105.02, 105.2199, 105.5, 105.5835, 105.84, 106.47, 106.79, 107.37, 106.9613, 106.785, 107.1, 107.24, 107.3693, 107.0992, 107.0065, 107.145, 106.6219, 107.33, 107.96, 108.445, 109.17, 110.13, 110.15, 110.93, 111.45, 111.66, 111.47, 110.43, 109.44, 109.82, 110.04, 110.061, 110.0308, 110.2501, 110.53, 110.38, 109.82, 110.1903, 110.2628, 110.17, 110.65, 111.3215, 110.92, 110.951, 110.86, 111.2099, 111.85, 112.1902, 111.8, 111.8, 111.89, 110.8906, 110.6975, 110.73, 111.0785, 110.48, 110.64, 110.45, 110.49, 109.82, 109.91, 109.44, 109.935, 110.0484, 109.7699, 109.35, 108.88, 108.75, 108.65, 108.06, 107.99, 107.67, 107.79, 107.66, 107.87, 107.23, 107.2206, 108.69, 108.8188, 108.22, 107.83, 109.16, 109.21, 109.3399, 109.77, 109.562, 109.48, 109.58, 109.13, 109.5695, 109.6708, 109.7607, 110.11, 109.48, 109.52, 108.931, 109.2, 108.095, 108.78, 107.9255, 108.54, 108.22, 108.25, 108.35, 108.4302, 108.68, 108.65, 108.81, 108.85, 108.98, 109.14, 108.85, 108.85, 108.97, 108.9, 109.16, 109.01, 109, 108.15, 108.21, 108.31, 108.4, 108.6, 108.04, 107.85, 108.11, 107.9, 107.8, 107.62, 107.5, 107.62, 108.03, 108.37, 108.56, 108.61, 108.7, 108.6146, 109.1499, 109, 108.51, 108.52, 109.14, 108.89, 109.91, 110.2965, 110.095, 110.6644, 110.46, 110.09, 109.865, 110.62, 110.285, 110.44, 110.7, 110.91, 110.745, 110.87, 111.235, 111.28, 111.4922, 111.5, 111.77, 112.0084, 111.995, 112.225, 112.28, 112.4798, 112.5, 112.48, 112.48, 112.42, 112.04, 112.04, 111.97, 111.6801, 111.8, 111.86, 111.86, 111.98, 111.97, 112, 112.25], 'h': [106.18, 107.85, 107.7, 106.9, 105.86, 105.59, 106.04, 105.64, 106.09, 106.51, 107.5, 107.57, 107.4599, 107.36, 107.12, 107.6496, 107.8, 107.3716, 107.365, 107.24, 107.15, 107.45, 108, 108.7, 109.46, 110.19, 110.19, 112.86, 111.45, 111.74, 111.86, 111.67, 110.58, 109.88, 110.35, 110.39, 110.2, 110.45, 110.55, 110.67, 110.4098, 110.2899, 110.52, 110.3, 110.7, 111.45, 111.4001, 111.03, 111, 111.5, 111.85, 112.38, 112.45, 111.8694, 112.08, 111.955, 111.24, 110.79, 111.12, 111.32, 110.74, 110.92, 110.62, 110.5, 110.11, 109.945, 109.95, 110.18, 110.07, 109.855, 109.46, 109.4, 108.75, 108.67, 108.34, 108.09, 107.9, 107.95, 108.03, 107.99, 107.555, 108.95, 109.3, 109.26, 108.4431, 109.25, 109.3, 109.59, 110.05, 109.88, 110.25, 109.9, 109.62, 109.57, 109.79, 109.89, 110.17, 110.2, 109.59, 109.72, 109.375, 109.22, 108.88, 108.8699, 108.7662, 108.99, 108.26, 108.42, 108.49, 108.77, 108.7, 108.82, 109, 109, 109.28, 109.14, 109, 109, 109.14, 109.18, 109.25, 109.12, 108.53, 108.39, 108.42, 108.4, 108.7, 108.65, 108.3, 108.11, 108.4, 108, 107.88, 107.75, 107.79, 108.27, 108.37, 108.67, 109, 108.89, 108.85, 109.19, 109.4359, 109.169, 108.99, 109.17, 109.71, 110.12, 110.45, 110.44, 110.76, 110.94, 110.71, 110.26, 110.64, 110.67, 110.56, 110.75, 110.97, 110.96, 111, 111.265, 111.625, 111.64, 111.7, 111.82, 112.25, 112.32, 112.24, 112.44, 112.5, 112.57, 112.52, 112.5, 112.52, 112.45, 112.08, 112.09, 112, 111.86, 111.86, 111.96, 112, 112, 112, 112.25], 'l': [103.1, 106.18, 106.14, 105.29, 104.84, 104.56, 105.1, 104.9, 105.18, 105.83, 106.4714, 106.6, 106.87, 106.65, 106.3, 107.06, 107.21, 106.72, 106.76, 106.68, 106.461, 106.58, 107.23, 107.9301, 108.33, 109.01, 110.08, 110.8525, 110.3, 110.791, 111.0252, 110.426, 109.4, 109.16, 109.67, 109.48, 109.76, 109.98, 109.995, 110.21, 109.47, 109.68, 110.04, 109.69, 110.03, 110.65, 110.72, 110.47, 110.55, 110.68, 111.03, 111.36, 111.7, 111.7, 110.95, 110.67, 110.19, 110.01, 110.26, 110.34, 110.2, 110.32, 110.06, 109.71, 109.68, 109.04, 109.22, 109.6709, 109.6, 109.28, 108.86, 108.5, 108.35, 107.76, 107.85, 107.45, 106.94, 107.14, 107.51, 106.77, 105, 107.25, 108.15, 108.1, 107.61, 107.82, 108.22, 108.72, 109.3298, 109.21, 109.41, 109.16, 108.67, 108.855, 109.35, 109.35, 109.56, 109.38, 109.21, 108.78, 108.8699, 108.07, 107.93, 107.59, 107.53, 108.03, 108, 108.2, 108.22, 108.4, 108.5, 108.22, 108.8, 108.75, 108.95, 108.81, 108.82, 108.85, 108.89, 108.94, 109.01, 108.8, 108.02, 108.09, 108.27, 108.29, 108.5, 108.04, 107.54, 107.74, 107.9, 107.65, 107.55, 107.27, 107.2, 107.6, 107.66, 108.17, 107.25, 108.5, 108.3, 108.56, 108.9, 108.42, 107.67, 107.97, 108.57, 108.71, 109.74, 109.84, 109.9, 110.42, 110.03, 109.81, 109.82, 110.14, 110.07, 110.38, 110.53, 110.4, 108.9836, 110.8, 111.18, 111.26, 111.3, 111.49, 111.715, 110.55, 111.77, 111.83, 112.2788, 112.28, 112.28, 112.46, 112.42, 112, 112.01, 111.9, 111.64, 111.69, 111.71, 111.82, 111.86, 111.9201, 111.93, 111.95], 'o': [104.54, 106.5, 107.36, 106.5802, 105.42, 105.02, 105.225, 105.514, 105.5829, 105.84, 106.4714, 106.7899, 107.3693, 106.965, 106.78, 107.085, 107.2315, 107.36, 107.1, 107.005, 107.14, 106.6174, 107.34, 107.96, 108.45, 109.18, 110.08, 112.3399, 110.5, 111.43, 111.66, 111.47, 110.431, 109.46, 109.83, 110.0493, 110.07, 110.0399, 110.2699, 110.53, 110.385, 109.8279, 110.1901, 110.26, 110.17, 110.6599, 111.335, 110.92, 110.97, 110.8679, 111.2, 111.84, 112.205, 111.8, 111.62, 111.75, 110.87, 110.695, 110.7301, 111.06, 110.4852, 110.64, 110.4499, 110.49, 109.81, 109.91, 109.445, 109.94, 110.045, 109.77, 109.36, 108.8777, 108.745, 108.6699, 108.05, 108, 107.68, 107.79, 107.68, 107.87, 105.17, 107.25, 108.85, 108.81, 108.21, 107.83, 109.16, 109.19, 109.345, 109.77, 109.57, 109.48, 109.595, 109.135, 109.56, 109.67, 109.77, 110.11, 109.48, 109.5292, 108.9376, 109.2, 108.11, 108.77, 107.93, 108.55, 108.2, 108.42, 108.36, 108.43, 108.69, 108.65, 108.8, 108.84, 109, 109.14, 108.91, 108.9, 108.98, 108.94, 109.19, 109.01, 108.22, 108.1, 108.29, 108.31, 108.5, 108.6, 108.3, 107.76, 108.07, 107.91, 107.8, 107.73, 107.62, 107.62, 108.01, 108.38, 107.4501, 108.62, 108.67, 108.62, 109.1018, 109.02, 108.43, 108.505, 109.1303, 108.88, 109.8999, 110.2901, 110.09, 110.66, 110.4407, 110.0896, 109.865, 110.6163, 110.28, 110.4492, 110.71, 110.9097, 110.749, 110.8658, 111.23, 111.29, 111.4965, 111.5, 111.76, 112.005, 111.995, 112.22, 112.3, 112.46, 112.5, 112.47, 112.5, 112.44, 112.08, 112.02, 112, 111.69, 111.78, 111.86, 111.89, 112, 111.97, 112], 's': 'ok', 't': [1600695000, 1600695900, 1600696800, 1600697700, 1600698600, 1600699500, 1600700400, 1600701300, 1600702200, 1600703100, 1600704000, 1600704900, 1600705800, 1600706700, 1600707600, 1600708500, 1600709400, 1600710300, 1600711200, 1600712100, 1600713000, 1600713900, 1600714800, 1600715700, 1600716600, 1600717500, 1600718400, 1600781400, 1600782300, 1600783200, 1600784100, 1600785000, 1600785900, 1600786800, 1600787700, 1600788600, 1600789500, 1600790400, 1600791300, 1600792200, 1600793100, 1600794000, 1600794900, 1600795800, 1600796700, 1600797600, 1600798500, 1600799400, 1600800300, 1600801200, 1600802100, 1600803000, 1600803900, 1600804800, 1600867800, 1600868700, 1600869600, 1600870500, 1600871400, 1600872300, 1600873200, 1600874100, 1600875000, 1600875900, 1600876800, 1600877700, 1600878600, 1600879500, 1600880400, 1600881300, 1600882200, 1600883100, 1600884000, 1600884900, 1600885800, 1600886700, 1600887600, 1600888500, 1600889400, 1600890300, 1600954200, 1600955100, 1600956000, 1600956900, 1600957800, 1600958700, 1600959600, 1600960500, 1600961400, 1600962300, 1600963200, 1600964100, 1600965000, 1600965900, 1600966800, 1600967700, 1600968600, 1600969500, 1600970400, 1600971300, 1600972200, 1600973100, 1600974000, 1600974900, 1600975800, 1600976700, 1600977600, 1600978500, 1600979400, 1600980300, 1600981200, 1600982100, 1600983000, 1600983900, 1600984800, 1600985700, 1600986600, 1600987500, 1600988400, 1600989300, 1600990200, 1600991100, 1601020800, 1601021700, 1601022600, 1601023500, 1601024400, 1601025300, 1601026200, 1601027100, 1601028000, 1601028900, 1601029800, 1601030700, 1601031600, 1601032500, 1601033400, 1601034300, 1601035200, 1601036100, 1601037000, 1601037900, 1601038800, 1601039700, 1601040600, 1601041500, 1601042400, 1601043300, 1601044200, 1601045100, 1601046000, 1601046900, 1601047800, 1601048700, 1601049600, 1601050500, 1601051400, 1601052300, 1601053200, 1601054100, 1601055000, 1601055900, 1601056800, 1601057700, 1601058600, 1601059500, 1601060400, 1601061300, 1601062200, 1601063100, 1601064000, 1601064900, 1601065800, 1601066700, 1601067600, 1601068500, 1601069400, 1601070300, 1601071200, 1601072100, 1601073000, 1601073900, 1601074800, 1601075700, 1601076600, 1601077500], 'v': [24883996, 13321982, 10281368, 8475115, 8319118, 7577409, 6248779, 5162809, 4831240, 4902923, 6653011, 5224752, 3914702, 4275994, 4263242, 4833704, 4221273, 4367626, 3705620, 3325282, 3361658, 3824474, 5575281, 8032826, 10093645, 13018331, 7530645, 22730339, 10003085, 8730013, 6883901, 6317516, 9046902, 6764999, 5492066, 4717222, 3672112, 4234636, 3809703, 3404294, 5299000, 3333903, 3890673, 4050594, 4949500, 6320228, 5623648, 4736397, 3868518, 5882792, 5803565, 9366461, 11671816, 301, 12390972, 6662857, 5895856, 4874360, 5066918, 4846275, 4058488, 3486784, 3687544, 5334522, 3686837, 4880536, 3560691, 3050576, 2753520, 2601230, 4126648, 4609504, 3753122, 6415187, 3958245, 5122466, 6669307, 5907888, 4778919, 12020115, 17759504, 11211220, 8690340, 7163067, 7154294, 6080189, 5656053, 5031837, 5706371, 4203137, 5151198, 4119461, 4941529, 3169721, 3426218, 3414091, 4343565, 4160244, 3411927, 4658325, 3339865, 5370626, 5260636, 5867045, 6211131, 8544535, 6684472, 44776, 209197, 64567, 25338, 63893, 42235, 39055, 72807, 519421, 28543, 12779, 35763, 30814, 60405, 89406, 9968, 5400, 3747, 1696, 2879, 3727, 6824, 5720, 5441, 7999, 5011, 6494, 75337, 72328, 54299, 48433, 472952, 97058, 109519, 219388, 236721, 217746, 7750110, 5099481, 5449888, 4990558, 4628342, 3044888, 3928634, 4112205, 3106615, 2642139, 2851580, 2231873, 1938730, 1919001, 2801994, 2459685, 1966544, 3027145, 3359327, 2910371, 2975196, 3050084, 4891975, 3861722, 4374859, 6906580, 2208096, 132237, 428110, 45917, 57922, 130685, 45654, 72798, 66961, 39656, 20014, 12840, 15833, 12833, 32599, 44746]}

class Candle:
    def __init__(self, close, high, low, open, ts, volume, item_number):
        bpy.ops.mesh.primitive_cube_add(size=1)
        self.candle_object = bpy.context.active_object
        bpy.ops.object.modifier_add(type='BEVEL')
        self.wick_height = high-low
        if (open-close) < 0:
            self.color = "red"
            self.candle_height = close-open
        elif (open-close) > 0:
            self.color = "green"
            self.candle_height = open-close
        else:
            self.color = "gray"
            self.candle_height = 0
        if self.candle_height < 0.01:
            self.candle_height = 0.01
        self.candle_object.scale = (0.1, 0.1,  self.candle_height)
        # create wick
        bpy.ops.mesh.primitive_cube_add()
        self.wick_object = bpy.context.active_object
        self.candle_object.modifiers["Bevel"].width = 0.02
        self.wick_object.scale = (0.01, 0.01, self.wick_height)
        self.candle_object.location[0] = item_number*.1
        self.wick_object.location[0] = item_number*.1 
        self.candle_object.location[2] = open + self.candle_height/2
        self.wick_object.location[2] = low + self.wick_height/2

class Scene:
    def __init__(self):
        bpy.ops.mesh.primitive_plane_add(size=50, location=(0,.7,0), rotation=(1.5708, 0, 0))
        self.background_plane = bpy.context.active_object
        # bpy.ops.rigidbody.object_add()
        # bpy.context.object.rigid_body.type = 'PASSIVE'


def get_stock_data(symbol, apikey):
    now=round(time.time())
    print(now)
    r = requests.get(f'https://finnhub.io/api/v1/stock/candle?symbol={symbol}&resolution=15&from={now-86400*7}&to={now}&token={apikey}')
    if r.status_code != 200:
        print(f'failed with code: {r.status_code}')
        data = default_data
    else:
        print(r.json())
        data = r.json()
    z_offset = data["o"][0]
    for i, close in enumerate(data["c"]):
        print(f'opened at {data["o"][i]} and closed at {close}')
        candle = Candle(close, data["h"][i], data["l"][i], data["o"][i], data["t"][i], data["v"][i], i)
        candle.candle_object.location[2] -= z_offset
        candle.wick_object.location[2] -= z_offset
    scene = Scene()
